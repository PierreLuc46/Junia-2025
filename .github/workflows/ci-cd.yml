name: CI/CD (master)

on:
  push:
    branches: [ "master" ]

# GITHUB_TOKEN suffit pour pousser sur GHCR
permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ghcr.io/pierreluc46/junia-2025   # <-- tout en minuscules
  IMAGE_TAG: ${{ github.sha }}
  DOCKER_PLATFORMS: linux/amd64

jobs:
  lint:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      - uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
      - name: Lint PHP (exclut ./useless/)
        run: |
          set -euo pipefail
          mapfile -d '' FILES < <(find . -path './useless' -prune -o -type f -name '*.php' -print0)
          if [ ${#FILES[@]} -eq 0 ]; then
            echo "Aucun fichier PHP trouvé."; exit 0
          fi
          for f in "${FILES[@]}"; do
            echo "Lint: $f"
            php -l "$f"
          done

  build:
    runs-on: self-hosted
    needs: [lint]
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build image (no push)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          platforms: ${{ env.DOCKER_PLATFORMS }}
          tags: |
            ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            ${{ env.IMAGE_NAME }}:master

  push:
    runs-on: self-hosted
    needs: [build]
    steps:
      - uses: actions/checkout@v4

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push images to GHCR
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: ${{ env.DOCKER_PLATFORMS }}
          tags: |
            ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            ${{ env.IMAGE_NAME }}:master

  deploy:
    runs-on: self-hosted
    needs: [push]
    steps:
      - uses: actions/checkout@v4

      - name: SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: known_hosts
        run: |
          mkdir -p ~/.ssh
          if [ -n "${{ secrets.SSH_KNOWN_HOSTS }}" ]; then
            printf "%s\n" "${{ secrets.SSH_KNOWN_HOSTS }}" >> ~/.ssh/known_hosts
          else
            ssh-keyscan -t rsa "${{ secrets.SSH_HOST }}" >> ~/.ssh/known_hosts
          fi

      - name: Remote deploy (no sudo, force /usr/bin/docker, port 8080)
        env:
          REMOTE_HOST: ${{ secrets.SSH_HOST }}
          REMOTE_USER: ${{ secrets.SSH_USER }}
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
          GHCR_USER: ${{ github.actor }}
          GHCR_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ssh -o StrictHostKeyChecking=yes "${REMOTE_USER}@${REMOTE_HOST}" \
            GHCR_USER="${GHCR_USER}" GHCR_TOKEN="${GHCR_TOKEN}" IMAGE_NAME="${IMAGE_NAME}" IMAGE_TAG="${IMAGE_TAG}" 'bash -s' << 'EOF'
          set -euo pipefail
          set -x

          # Eviter tout alias "docker='sudo docker'"
          unalias docker 2>/dev/null || true

          # Chemin docker explicite
          DOCKER_BIN="/usr/bin/docker"
          if ! [ -x "$DOCKER_BIN" ]; then
            DOCKER_BIN="$(command -v docker)"
          fi

          # Login GHCR si token dispo (ignore si image publique)
          if [ -n "${GHCR_TOKEN:-}" ]; then
            echo "${GHCR_TOKEN}" | "$DOCKER_BIN" login ghcr.io -u "${GHCR_USER}" --password-stdin || true
          fi

          # Pull de l'image taguée SHA, sinon fallback :master
          "$DOCKER_BIN" pull "${IMAGE_NAME}:${IMAGE_TAG}" || "$DOCKER_BIN" pull "${IMAGE_NAME}:master"

          # Stop & remove ancien conteneur
          "$DOCKER_BIN" rm -f webapp 2>/dev/null || true

          # Lancer sur 8080 pour éviter le conflit avec nginx:80
          "$DOCKER_BIN" run -d --name webapp -p 8080:80 "${IMAGE_NAME}:${IMAGE_TAG}"

          # Nettoyage léger
          "$DOCKER_BIN" image prune -f || true
          EOF
