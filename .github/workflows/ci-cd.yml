name: CI/CD (master)

on:
  push:
    branches: [ "master" ]

# Le GITHUB_TOKEN suffira pour pousser sur GHCR
permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ghcr.io/pierreluc46/junia-2025   # <= tout en minuscules
  IMAGE_TAG: ${{ github.sha }}
  DOCKER_PLATFORMS: linux/amd64

jobs:
  lint:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      - uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
      - name: Lint PHP (sauf dossier useless/)
        run: |
          set -euo pipefail
          mapfile -d '' FILES < <(find . -path './useless' -prune -o -type f -name '*.php' -print0)
          if [ ${#FILES[@]} -eq 0 ]; then
            echo "Aucun fichier PHP trouvé."; exit 0
          fi
          for f in "${FILES[@]}"; do
            echo "Lint: $f"
            php -l "$f"
          done

  build:
    runs-on: self-hosted
    needs: [lint]
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build image (no push)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          platforms: ${{ env.DOCKER_PLATFORMS }}
          tags: |
            ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            ${{ env.IMAGE_NAME }}:master

  push:
    runs-on: self-hosted
    needs: [build]
    steps:
      - uses: actions/checkout@v4

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push images to GHCR
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: ${{ env.DOCKER_PLATFORMS }}
          tags: |
            ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            ${{ env.IMAGE_NAME }}:master

  deploy:
    runs-on: self-hosted
    needs: [push]
    steps:
      - uses: actions/checkout@v4

      - name: SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: known_hosts
        run: |
          mkdir -p ~/.ssh
          if [ -n "${{ secrets.SSH_KNOWN_HOSTS }}" ]; then
            printf "%s\n" "${{ secrets.SSH_KNOWN_HOSTS }}" >> ~/.ssh/known_hosts
          else
            ssh-keyscan -t rsa "${{ secrets.SSH_HOST }}" >> ~/.ssh/known_hosts
          fi

      - name: Remote deploy (pull depuis GHCR)
        env:
          REMOTE_HOST: ${{ secrets.SSH_HOST }}
          REMOTE_USER: ${{ secrets.SSH_USER }}
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
          GHCR_USER: ${{ github.actor }}
          GHCR_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ssh -o StrictHostKeyChecking=yes "${REMOTE_USER}@${REMOTE_HOST}" bash -s << 'EOF'
          set -euo pipefail

          if ! command -v docker >/dev/null 2>&1; then
            echo "Docker non installé sur la cible"; exit 1
          fi

          # Tente un login GHCR si le token a été passé, sinon on suppose l'image publique
          if [ -n "${GHCR_TOKEN:-}" ]; then
            echo "${GHCR_TOKEN}" | docker login ghcr.io -u "${GHCR_USER}" --password-stdin || true
          fi

          docker pull "${IMAGE_NAME}:${IMAGE_TAG}" || docker pull "${IMAGE_NAME}:master"

          if docker ps -a --format '{{.Names}}' | grep -q '^webapp$'; then
            docker rm -f webapp
          fi

          docker run -d --name webapp -p 80:80 "${IMAGE_NAME}:${IMAGE_TAG}"

          docker image prune -f || true
          EOF
